// Courtney Gibbons
// 705485300

1. // hard
*p3 = S
*p3 = T, p3 = 6940
*p1 = S, p1 = 6940

2.
D. *p = 75;

3.
2. double *p = &c; and 4. char *q = &i; will not compile.
A pointer needs to match the referent's type.  In 2., we have a double pointing to a char, and in 4., we have a char pointing to an int.

4.
address of the blocks array is 4434

char blocks[3] = {'A','B','C'};
char *ptr = &blocks[0];    // ptr will be assigned the value: 4434
char temp;

temp = blocks[0];          // temp will be assigned the value: A
temp = *(blocks + 2);      // temp will be assigned the value: C // hard
temp = *(ptr + 1);         // temp will be assigned the value: B
temp = *ptr;               // temp will be assigned the value: A

ptr = blocks + 1;          // ptr will be assigned the value: 4435
temp = *ptr;               // temp will be assigned the value: B
temp = *(ptr + 1);         // temp will be assigned the value: C

ptr = blocks;              // ptr will be assigned the value: 4434
temp = *++ptr;             // temp will be assigned the value: B // hard - increments *ptr for the rest of the program
temp = ++*ptr;             // temp will be assigned the value: C // hard - B incremented to C - stays for rest of program
temp = *ptr++;             // temp will be assigned the value: C // hard - increments for next line
temp = *ptr;               // temp will be assigned the value: C // hard - incrementation doesn't show bc nothing past C

5.
int num[ 6 ] = { 0, 0, 0, 0, 0, 0 }; // [100, 90, 80, 70, 60, 0]
num[0] = 100;
num[1] = 90;
num[2] = 80;
num[3] = 70;
num[4] = 60;
for (int i = 0; i <= 5; i++) {
    cout << num[ i ] << " ";
}
cout << endl;

6. // hard
#import <iostream>
#include <cctype>
using namespace std;

void revString( char * msg ) {
    char * ptr = msg;
    // create ptr to msg and loop through values of msg
    while (*ptr != '\0') {
        // check if each value is a digit
        if (isdigit(*ptr)) {
            // delete the digit by moving everything over 1
            // dont want to lose our place with ptr so need temp
            char * temp = ptr;
            while (*temp != '\0') {
                *temp = *(temp + 1);
                temp = temp + 1;
            }
            // dont increment bc new value may be a digit
        }
        else {
            ptr = ptr + 1;
        }
    }
}
